
segment2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000758  000007cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000758  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000085  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003e9  00000000  00000000  0000088d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000183  00000000  00000000  00000c76  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004a9  00000000  00000000  00000df9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  000012a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000197  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000012e  00000000  00000000  000014bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e5       	ldi	r30, 0x58	; 88
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 31       	cpi	r26, 0x1C	; 28
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <main>
  b6:	0c 94 aa 03 	jmp	0x754	; 0x754 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <port_init>:
#define EX_SS_SEL (*(volatile unsigned char *)0x8003)


void port_init(void)
{
 PORTA = 0x00;
  be:	1b ba       	out	0x1b, r1	; 27
 DDRA  = 0xff;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	8a bb       	out	0x1a, r24	; 26
 
 PORTB = 0x00;
  c4:	18 ba       	out	0x18, r1	; 24
 DDRB  = 0x00;
  c6:	17 ba       	out	0x17, r1	; 23
 
 PORTC = 0x00; //m103 output only
  c8:	15 ba       	out	0x15, r1	; 21
 DDRC  = 0x03;
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	84 bb       	out	0x14, r24	; 20
 
 PORTD = 0x00;
  ce:	12 ba       	out	0x12, r1	; 18
 DDRD  = 0x00;
  d0:	11 ba       	out	0x11, r1	; 17
 
 PORTE = 0x00;
  d2:	13 b8       	out	0x03, r1	; 3
 DDRE  = 0x00;
  d4:	12 b8       	out	0x02, r1	; 2
 
 PORTF = 0x00;
  d6:	10 92 62 00 	sts	0x0062, r1
 DDRF  = 0x00;
  da:	10 92 61 00 	sts	0x0061, r1
 
 PORTG = 0x00;
  de:	10 92 65 00 	sts	0x0065, r1
 DDRG  = 0x03;
  e2:	80 93 64 00 	sts	0x0064, r24
}
  e6:	08 95       	ret

000000e8 <SetTimeZero>:
//			누르면 각각 1부터4 자리수까지 숫자 올리기 1,3자리(0~5) 2,4자리(0~9) 
// 3번버튼	스탑워치
// 4번버튼	알람설정

void SetTimeZero(int *arr[4])
{
  e8:	fc 01       	movw	r30, r24
	arr[0] = 0;
  ea:	11 82       	std	Z+1, r1	; 0x01
  ec:	10 82       	st	Z, r1
	arr[1] = 0;
  ee:	13 82       	std	Z+3, r1	; 0x03
  f0:	12 82       	std	Z+2, r1	; 0x02
	arr[2] = 0;
  f2:	15 82       	std	Z+5, r1	; 0x05
  f4:	14 82       	std	Z+4, r1	; 0x04
	arr[3] = 0;
  f6:	17 82       	std	Z+7, r1	; 0x07
  f8:	16 82       	std	Z+6, r1	; 0x06
}
  fa:	08 95       	ret

000000fc <TimeCopy>:

void TimeCopy(int* arr1, int* arr2)
{
  fc:	dc 01       	movw	r26, r24
  fe:	fb 01       	movw	r30, r22
	arr1[0] = arr2[0];
 100:	80 81       	ld	r24, Z
 102:	91 81       	ldd	r25, Z+1	; 0x01
 104:	11 96       	adiw	r26, 0x01	; 1
 106:	9c 93       	st	X, r25
 108:	8e 93       	st	-X, r24
	arr1[1] = arr2[1];
 10a:	82 81       	ldd	r24, Z+2	; 0x02
 10c:	93 81       	ldd	r25, Z+3	; 0x03
 10e:	13 96       	adiw	r26, 0x03	; 3
 110:	9c 93       	st	X, r25
 112:	8e 93       	st	-X, r24
 114:	12 97       	sbiw	r26, 0x02	; 2
	arr1[2] = arr2[2];
 116:	84 81       	ldd	r24, Z+4	; 0x04
 118:	95 81       	ldd	r25, Z+5	; 0x05
 11a:	15 96       	adiw	r26, 0x05	; 5
 11c:	9c 93       	st	X, r25
 11e:	8e 93       	st	-X, r24
 120:	14 97       	sbiw	r26, 0x04	; 4
	arr1[3] = arr2[3];
 122:	86 81       	ldd	r24, Z+6	; 0x06
 124:	97 81       	ldd	r25, Z+7	; 0x07
 126:	17 96       	adiw	r26, 0x07	; 7
 128:	9c 93       	st	X, r25
 12a:	8e 93       	st	-X, r24
 12c:	16 97       	sbiw	r26, 0x06	; 6
}
 12e:	08 95       	ret

00000130 <RunningTime>:

void RunningTime(int* arr, float *temp_time)
{		
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	ec 01       	movw	r28, r24
 13a:	8b 01       	movw	r16, r22
	*temp_time += 0.05f;
 13c:	fb 01       	movw	r30, r22
 13e:	60 81       	ld	r22, Z
 140:	71 81       	ldd	r23, Z+1	; 0x01
 142:	82 81       	ldd	r24, Z+2	; 0x02
 144:	93 81       	ldd	r25, Z+3	; 0x03
 146:	2d ec       	ldi	r18, 0xCD	; 205
 148:	3c ec       	ldi	r19, 0xCC	; 204
 14a:	4c e4       	ldi	r20, 0x4C	; 76
 14c:	5d e3       	ldi	r21, 0x3D	; 61
 14e:	0e 94 a6 02 	call	0x54c	; 0x54c <__addsf3>
 152:	f8 01       	movw	r30, r16
 154:	60 83       	st	Z, r22
 156:	71 83       	std	Z+1, r23	; 0x01
 158:	82 83       	std	Z+2, r24	; 0x02
 15a:	93 83       	std	Z+3, r25	; 0x03
	if (*temp_time  > 1.0f)
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	40 e8       	ldi	r20, 0x80	; 128
 162:	5f e3       	ldi	r21, 0x3F	; 63
 164:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__gesf2>
 168:	18 16       	cp	r1, r24
 16a:	74 f4       	brge	.+28     	; 0x188 <RunningTime+0x58>
	{
		arr[3]++;
 16c:	8e 81       	ldd	r24, Y+6	; 0x06
 16e:	9f 81       	ldd	r25, Y+7	; 0x07
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	9f 83       	std	Y+7, r25	; 0x07
 174:	8e 83       	std	Y+6, r24	; 0x06
		*temp_time = 0.0f;
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	a0 e0       	ldi	r26, 0x00	; 0
 17c:	b0 e0       	ldi	r27, 0x00	; 0
 17e:	f8 01       	movw	r30, r16
 180:	80 83       	st	Z, r24
 182:	91 83       	std	Z+1, r25	; 0x01
 184:	a2 83       	std	Z+2, r26	; 0x02
 186:	b3 83       	std	Z+3, r27	; 0x03
	}

	if (arr[3] > 9)
 188:	8e 81       	ldd	r24, Y+6	; 0x06
 18a:	9f 81       	ldd	r25, Y+7	; 0x07
 18c:	0a 97       	sbiw	r24, 0x0a	; 10
 18e:	ec f0       	brlt	.+58     	; 0x1ca <RunningTime+0x9a>
	{
		arr[3] = 0;
 190:	1f 82       	std	Y+7, r1	; 0x07
 192:	1e 82       	std	Y+6, r1	; 0x06
		arr[2]++;
 194:	8c 81       	ldd	r24, Y+4	; 0x04
 196:	9d 81       	ldd	r25, Y+5	; 0x05
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	9d 83       	std	Y+5, r25	; 0x05
 19c:	8c 83       	std	Y+4, r24	; 0x04
		if (arr[2] > 5)
 19e:	06 97       	sbiw	r24, 0x06	; 6
 1a0:	a4 f0       	brlt	.+40     	; 0x1ca <RunningTime+0x9a>
		{
			arr[2] = 0;
 1a2:	1d 82       	std	Y+5, r1	; 0x05
 1a4:	1c 82       	std	Y+4, r1	; 0x04
			arr[1]++;
 1a6:	8a 81       	ldd	r24, Y+2	; 0x02
 1a8:	9b 81       	ldd	r25, Y+3	; 0x03
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	9b 83       	std	Y+3, r25	; 0x03
 1ae:	8a 83       	std	Y+2, r24	; 0x02
			if (arr[1] > 9)
 1b0:	0a 97       	sbiw	r24, 0x0a	; 10
 1b2:	5c f0       	brlt	.+22     	; 0x1ca <RunningTime+0x9a>
			{
				arr[1] = 0;
 1b4:	1b 82       	std	Y+3, r1	; 0x03
 1b6:	1a 82       	std	Y+2, r1	; 0x02
				arr[0]++;
 1b8:	88 81       	ld	r24, Y
 1ba:	99 81       	ldd	r25, Y+1	; 0x01
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	99 83       	std	Y+1, r25	; 0x01
 1c0:	88 83       	st	Y, r24
				if (arr[0] > 5)
 1c2:	06 97       	sbiw	r24, 0x06	; 6
 1c4:	14 f0       	brlt	.+4      	; 0x1ca <RunningTime+0x9a>
				arr[0] = 0;
 1c6:	19 82       	std	Y+1, r1	; 0x01
 1c8:	18 82       	st	Y, r1
			}
		}
	}
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	08 95       	ret

000001d4 <CompareTime>:

int CompareTime(int* arr1, int* arr2)
{
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	ec 01       	movw	r28, r24
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	50 e0       	ldi	r21, 0x00	; 0
	for (int i = 0; i < 4; i++)
	{
		if (arr1[i] != arr2[i])
 1de:	fe 01       	movw	r30, r28
 1e0:	e4 0f       	add	r30, r20
 1e2:	f5 1f       	adc	r31, r21
 1e4:	db 01       	movw	r26, r22
 1e6:	a4 0f       	add	r26, r20
 1e8:	b5 1f       	adc	r27, r21
 1ea:	20 81       	ld	r18, Z
 1ec:	31 81       	ldd	r19, Z+1	; 0x01
 1ee:	8d 91       	ld	r24, X+
 1f0:	9c 91       	ld	r25, X
 1f2:	28 17       	cp	r18, r24
 1f4:	39 07       	cpc	r19, r25
 1f6:	19 f0       	breq	.+6      	; 0x1fe <CompareTime+0x2a>
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	07 c0       	rjmp	.+14     	; 0x20c <CompareTime+0x38>
 1fe:	4e 5f       	subi	r20, 0xFE	; 254
 200:	5f 4f       	sbci	r21, 0xFF	; 255
	}
}

int CompareTime(int* arr1, int* arr2)
{
	for (int i = 0; i < 4; i++)
 202:	48 30       	cpi	r20, 0x08	; 8
 204:	51 05       	cpc	r21, r1
 206:	59 f7       	brne	.-42     	; 0x1de <CompareTime+0xa>
 208:	21 e0       	ldi	r18, 0x01	; 1
 20a:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (arr1[i] != arr2[i])
		return 0;
	}
	return 1;
}
 20c:	c9 01       	movw	r24, r18
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <PrintTime>:

void PrintTime(int* arr)
{
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	8c 01       	movw	r16, r24
	EX_SS_SEL=~(0x01);
 21e:	63 e0       	ldi	r22, 0x03	; 3
 220:	70 e8       	ldi	r23, 0x80	; 128
 222:	8e ef       	ldi	r24, 0xFE	; 254
 224:	eb 01       	movw	r28, r22
 226:	88 83       	st	Y, r24
	EX_SS_DATA=segment_data[arr[0]];
 228:	a0 e0       	ldi	r26, 0x00	; 0
 22a:	b1 e0       	ldi	r27, 0x01	; 1
 22c:	e8 01       	movw	r28, r16
 22e:	e8 81       	ld	r30, Y
 230:	f9 81       	ldd	r31, Y+1	; 0x01
 232:	ea 0f       	add	r30, r26
 234:	fb 1f       	adc	r31, r27
 236:	80 81       	ld	r24, Z
 238:	42 e0       	ldi	r20, 0x02	; 2
 23a:	50 e8       	ldi	r21, 0x80	; 128
 23c:	fa 01       	movw	r30, r20
 23e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 240:	2c ed       	ldi	r18, 0xDC	; 220
 242:	35 e0       	ldi	r19, 0x05	; 5
 244:	c9 01       	movw	r24, r18
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <PrintTime+0x32>
	_delay_ms(5);
	EX_SS_SEL=~(0x02);
 24a:	8d ef       	ldi	r24, 0xFD	; 253
 24c:	eb 01       	movw	r28, r22
 24e:	88 83       	st	Y, r24
	EX_SS_DATA=segment_data[arr[1]];
 250:	e8 01       	movw	r28, r16
 252:	ea 81       	ldd	r30, Y+2	; 0x02
 254:	fb 81       	ldd	r31, Y+3	; 0x03
 256:	ea 0f       	add	r30, r26
 258:	fb 1f       	adc	r31, r27
 25a:	80 81       	ld	r24, Z
 25c:	fa 01       	movw	r30, r20
 25e:	80 83       	st	Z, r24
 260:	c9 01       	movw	r24, r18
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <PrintTime+0x4e>
	_delay_ms(5);
	EX_SS_SEL=~(0x04);
 266:	8b ef       	ldi	r24, 0xFB	; 251
 268:	eb 01       	movw	r28, r22
 26a:	88 83       	st	Y, r24
	EX_SS_DATA=segment_data[arr[2]];
 26c:	e8 01       	movw	r28, r16
 26e:	ec 81       	ldd	r30, Y+4	; 0x04
 270:	fd 81       	ldd	r31, Y+5	; 0x05
 272:	ea 0f       	add	r30, r26
 274:	fb 1f       	adc	r31, r27
 276:	80 81       	ld	r24, Z
 278:	fa 01       	movw	r30, r20
 27a:	80 83       	st	Z, r24
 27c:	c9 01       	movw	r24, r18
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <PrintTime+0x6a>
	_delay_ms(5);
	EX_SS_SEL=~(0x08);
 282:	87 ef       	ldi	r24, 0xF7	; 247
 284:	eb 01       	movw	r28, r22
 286:	88 83       	st	Y, r24
	EX_SS_DATA=segment_data[arr[3]];
 288:	f8 01       	movw	r30, r16
 28a:	86 81       	ldd	r24, Z+6	; 0x06
 28c:	97 81       	ldd	r25, Z+7	; 0x07
 28e:	a8 0f       	add	r26, r24
 290:	b9 1f       	adc	r27, r25
 292:	8c 91       	ld	r24, X
 294:	ea 01       	movw	r28, r20
 296:	88 83       	st	Y, r24
 298:	c9 01       	movw	r24, r18
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <PrintTime+0x86>
	_delay_ms(5);
}
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	1f 91       	pop	r17
 2a4:	0f 91       	pop	r16
 2a6:	08 95       	ret

000002a8 <main>:


int main(void)
{
 2a8:	2f 92       	push	r2
 2aa:	3f 92       	push	r3
 2ac:	4f 92       	push	r4
 2ae:	5f 92       	push	r5
 2b0:	6f 92       	push	r6
 2b2:	7f 92       	push	r7
 2b4:	8f 92       	push	r8
 2b6:	9f 92       	push	r9
 2b8:	af 92       	push	r10
 2ba:	bf 92       	push	r11
 2bc:	cf 92       	push	r12
 2be:	df 92       	push	r13
 2c0:	ef 92       	push	r14
 2c2:	ff 92       	push	r15
 2c4:	0f 93       	push	r16
 2c6:	1f 93       	push	r17
 2c8:	df 93       	push	r29
 2ca:	cf 93       	push	r28
 2cc:	cd b7       	in	r28, 0x3d	; 61
 2ce:	de b7       	in	r29, 0x3e	; 62
 2d0:	a5 97       	sbiw	r28, 0x25	; 37
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	f8 94       	cli
 2d6:	de bf       	out	0x3e, r29	; 62
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	cd bf       	out	0x3d, r28	; 61
    port_init();
 2dc:	0e 94 5f 00 	call	0xbe	; 0xbe <port_init>
	
	EX_SS_SEL = 0x0f; // 초기값으로 디지트 OFF
 2e0:	8f e0       	ldi	r24, 0x0F	; 15
 2e2:	80 93 03 80 	sts	0x8003, r24
	MCUCR = 0x80;
 2e6:	80 e8       	ldi	r24, 0x80	; 128
 2e8:	85 bf       	out	0x35, r24	; 53
	PORTB = 0x00;
 2ea:	18 ba       	out	0x18, r1	; 24
	DDRB = 0x00;
 2ec:	17 ba       	out	0x17, r1	; 23
    PORTD = 0xff; // PORTD 초기값 설정	
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	82 bb       	out	0x12, r24	; 18
	DDRD = 0xff; // PORTD  모두 출력으로 설정	 
 2f2:	81 bb       	out	0x11, r24	; 17
	
	float temp_time = 0.0f;
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	a0 e0       	ldi	r26, 0x00	; 0
 2fa:	b0 e0       	ldi	r27, 0x00	; 0
 2fc:	89 83       	std	Y+1, r24	; 0x01
 2fe:	9a 83       	std	Y+2, r25	; 0x02
 300:	ab 83       	std	Y+3, r26	; 0x03
 302:	bc 83       	std	Y+4, r27	; 0x04
	int cur_time_arr[4] = { 1,7,5,1 };
 304:	de 01       	movw	r26, r28
 306:	15 96       	adiw	r26, 0x05	; 5
 308:	e3 e1       	ldi	r30, 0x13	; 19
 30a:	f1 e0       	ldi	r31, 0x01	; 1
 30c:	88 e0       	ldi	r24, 0x08	; 8
 30e:	01 90       	ld	r0, Z+
 310:	0d 92       	st	X+, r0
 312:	81 50       	subi	r24, 0x01	; 1
 314:	e1 f7       	brne	.-8      	; 0x30e <main+0x66>
	int stop_time_arr[4] = { 0, };
 316:	fe 01       	movw	r30, r28
 318:	3d 96       	adiw	r30, 0x0d	; 13
 31a:	88 e0       	ldi	r24, 0x08	; 8
 31c:	df 01       	movw	r26, r30
 31e:	1d 92       	st	X+, r1
 320:	8a 95       	dec	r24
 322:	e9 f7       	brne	.-6      	; 0x31e <main+0x76>
	int alram_time_arr[4] = { 1,8,0,0 };
 324:	de 01       	movw	r26, r28
 326:	55 96       	adiw	r26, 0x15	; 21
 328:	eb e0       	ldi	r30, 0x0B	; 11
 32a:	f1 e0       	ldi	r31, 0x01	; 1
 32c:	88 e0       	ldi	r24, 0x08	; 8
 32e:	01 90       	ld	r0, Z+
 330:	0d 92       	st	X+, r0
 332:	81 50       	subi	r24, 0x01	; 1
 334:	e1 f7       	brne	.-8      	; 0x32e <main+0x86>
	int blank_arr[4] = { 10, }; // 깜빡일때 사용
 336:	fe 01       	movw	r30, r28
 338:	7d 96       	adiw	r30, 0x1d	; 29
 33a:	88 e0       	ldi	r24, 0x08	; 8
 33c:	df 01       	movw	r26, r30
 33e:	1d 92       	st	X+, r1
 340:	8a 95       	dec	r24
 342:	e9 f7       	brne	.-6      	; 0x33e <main+0x96>
 344:	8a e0       	ldi	r24, 0x0A	; 10
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	9e 8f       	std	Y+30, r25	; 0x1e
 34a:	8d 8f       	std	Y+29, r24	; 0x1d
	unsigned char keydata, key_old;
	
	
	
	
	EX_SS_SEL = 0x0f;
 34c:	8f e0       	ldi	r24, 0x0F	; 15
 34e:	80 93 03 80 	sts	0x8003, r24
 352:	66 24       	eor	r6, r6
 354:	77 24       	eor	r7, r7
 356:	00 e0       	ldi	r16, 0x00	; 0
 358:	10 e0       	ldi	r17, 0x00	; 0
 35a:	88 24       	eor	r8, r8
 35c:	99 24       	eor	r9, r9
 35e:	ee 24       	eor	r14, r14
 360:	ff 24       	eor	r15, r15
				SetTimeZero(stop_time_arr);
			}
			else if (keydata == 0x08) 
			{
				state = 3;// 알람설정
				TimeCopy(alram_time_arr, cur_time_arr);
 362:	95 e0       	ldi	r25, 0x05	; 5
 364:	a9 2e       	mov	r10, r25
 366:	b1 2c       	mov	r11, r1
 368:	ac 0e       	add	r10, r28
 36a:	bd 1e       	adc	r11, r29
				setNumCount = 0; 
			}
			else if (keydata == 0x04) 
			{
				state = 2; // 스탑워치
				SetTimeZero(stop_time_arr);
 36c:	bd e0       	ldi	r27, 0x0D	; 13
 36e:	2b 2e       	mov	r2, r27
 370:	31 2c       	mov	r3, r1
 372:	2c 0e       	add	r2, r28
 374:	3d 1e       	adc	r3, r29
					setDigitCount++;
					setDigitCount %= 4;
				}
				else if((PINB & 0xff) == 0x20) // 
				{					
					cur_time_arr[setDigitCount]++;
 376:	6e 01       	movw	r12, r28
 378:	08 94       	sec
 37a:	c1 1c       	adc	r12, r1
 37c:	d1 1c       	adc	r13, r1
			case 0: // 현재시간
				RunningTime(cur_time_arr ,&temp_time);
				PrintTime(cur_time_arr);
				if (alram_state == 1 && alram_count < 10) // 열번 깜빡이고 끝
				{
					PrintTime(blank_arr);					
 37e:	4e 2e       	mov	r4, r30
 380:	fd a3       	std	Y+37, r31	; 0x25
 382:	03 c0       	rjmp	.+6      	; 0x38a <main+0xe2>
	unsigned char keydata, key_old;
	
	
	
	
	EX_SS_SEL = 0x0f;
 384:	66 24       	eor	r6, r6
 386:	77 24       	eor	r7, r7
 388:	85 2d       	mov	r24, r5
		
	while (1)
	{		
		keydata = PINB & 0xff;
 38a:	56 b2       	in	r5, 0x16	; 22
		if (keydata != key_old)
 38c:	58 16       	cp	r5, r24
 38e:	31 f1       	breq	.+76     	; 0x3dc <main+0x134>
		{
			if (keydata == 0x01) state = 0;  // 현재시간
 390:	b1 e0       	ldi	r27, 0x01	; 1
 392:	5b 16       	cp	r5, r27
 394:	19 f4       	brne	.+6      	; 0x39c <main+0xf4>
 396:	ee 24       	eor	r14, r14
 398:	ff 24       	eor	r15, r15
 39a:	20 c0       	rjmp	.+64     	; 0x3dc <main+0x134>
			else if (keydata == 0x02) // 시간조절
 39c:	82 e0       	ldi	r24, 0x02	; 2
 39e:	58 16       	cp	r5, r24
 3a0:	31 f4       	brne	.+12     	; 0x3ae <main+0x106>
 3a2:	00 e0       	ldi	r16, 0x00	; 0
 3a4:	10 e0       	ldi	r17, 0x00	; 0
 3a6:	a1 e0       	ldi	r26, 0x01	; 1
 3a8:	ea 2e       	mov	r14, r26
 3aa:	f1 2c       	mov	r15, r1
 3ac:	17 c0       	rjmp	.+46     	; 0x3dc <main+0x134>
			{
				state = 1; 
				setDigitCount = 0;
				setNumCount = 0; 
			}
			else if (keydata == 0x04) 
 3ae:	a4 e0       	ldi	r26, 0x04	; 4
 3b0:	5a 16       	cp	r5, r26
 3b2:	39 f4       	brne	.+14     	; 0x3c2 <main+0x11a>
			{
				state = 2; // 스탑워치
				SetTimeZero(stop_time_arr);
 3b4:	c1 01       	movw	r24, r2
 3b6:	0e 94 74 00 	call	0xe8	; 0xe8 <SetTimeZero>
 3ba:	f2 e0       	ldi	r31, 0x02	; 2
 3bc:	ef 2e       	mov	r14, r31
 3be:	f1 2c       	mov	r15, r1
 3c0:	0d c0       	rjmp	.+26     	; 0x3dc <main+0x134>
			}
			else if (keydata == 0x08) 
 3c2:	b8 e0       	ldi	r27, 0x08	; 8
 3c4:	5b 16       	cp	r5, r27
 3c6:	51 f4       	brne	.+20     	; 0x3dc <main+0x134>
			{
				state = 3;// 알람설정
				TimeCopy(alram_time_arr, cur_time_arr);
 3c8:	ce 01       	movw	r24, r28
 3ca:	45 96       	adiw	r24, 0x15	; 21
 3cc:	b5 01       	movw	r22, r10
 3ce:	0e 94 7e 00 	call	0xfc	; 0xfc <TimeCopy>
 3d2:	00 e0       	ldi	r16, 0x00	; 0
 3d4:	10 e0       	ldi	r17, 0x00	; 0
 3d6:	e3 e0       	ldi	r30, 0x03	; 3
 3d8:	ee 2e       	mov	r14, r30
 3da:	f1 2c       	mov	r15, r1
				setDigitCount = 0;
				setNumCount = 0;
			}
		}
		
		if (CompareTime(cur_time_arr, alram_time_arr) == 1) // 알람 on
 3dc:	c5 01       	movw	r24, r10
 3de:	be 01       	movw	r22, r28
 3e0:	6b 5e       	subi	r22, 0xEB	; 235
 3e2:	7f 4f       	sbci	r23, 0xFF	; 255
 3e4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <CompareTime>
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	19 f4       	brne	.+6      	; 0x3f2 <main+0x14a>
 3ec:	71 e0       	ldi	r23, 0x01	; 1
 3ee:	67 2e       	mov	r6, r23
 3f0:	71 2c       	mov	r7, r1
			alram_state = 1;
		
		switch (state)
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	e8 16       	cp	r14, r24
 3f6:	f1 04       	cpc	r15, r1
 3f8:	21 f1       	breq	.+72     	; 0x442 <main+0x19a>
 3fa:	a2 e0       	ldi	r26, 0x02	; 2
 3fc:	ea 16       	cp	r14, r26
 3fe:	f1 04       	cpc	r15, r1
 400:	24 f4       	brge	.+8      	; 0x40a <main+0x162>
 402:	e1 14       	cp	r14, r1
 404:	f1 04       	cpc	r15, r1
 406:	61 f0       	breq	.+24     	; 0x420 <main+0x178>
 408:	bf cf       	rjmp	.-130    	; 0x388 <main+0xe0>
 40a:	b2 e0       	ldi	r27, 0x02	; 2
 40c:	eb 16       	cp	r14, r27
 40e:	f1 04       	cpc	r15, r1
 410:	09 f4       	brne	.+2      	; 0x414 <main+0x16c>
 412:	41 c0       	rjmp	.+130    	; 0x496 <main+0x1ee>
 414:	83 e0       	ldi	r24, 0x03	; 3
 416:	e8 16       	cp	r14, r24
 418:	f1 04       	cpc	r15, r1
 41a:	09 f0       	breq	.+2      	; 0x41e <main+0x176>
 41c:	b5 cf       	rjmp	.-150    	; 0x388 <main+0xe0>
 41e:	5f c0       	rjmp	.+190    	; 0x4de <main+0x236>
		{			
			case 0: // 현재시간
				RunningTime(cur_time_arr ,&temp_time);
 420:	c5 01       	movw	r24, r10
 422:	b6 01       	movw	r22, r12
 424:	0e 94 98 00 	call	0x130	; 0x130 <RunningTime>
				PrintTime(cur_time_arr);
 428:	c5 01       	movw	r24, r10
 42a:	0e 94 0a 01 	call	0x214	; 0x214 <PrintTime>
				if (alram_state == 1 && alram_count < 10) // 열번 깜빡이고 끝
 42e:	a1 e0       	ldi	r26, 0x01	; 1
 430:	6a 16       	cp	r6, r26
 432:	71 04       	cpc	r7, r1
 434:	09 f0       	breq	.+2      	; 0x438 <main+0x190>
 436:	a6 cf       	rjmp	.-180    	; 0x384 <main+0xdc>
				{
					PrintTime(blank_arr);					
 438:	84 2d       	mov	r24, r4
 43a:	9d a1       	ldd	r25, Y+37	; 0x25
 43c:	0e 94 0a 01 	call	0x214	; 0x214 <PrintTime>
 440:	a3 cf       	rjmp	.-186    	; 0x388 <main+0xe0>
				{
					alram_state = 0; alram_count = 0;
				}
				break;
			case 1: // 시간조절
				PrintTime(cur_time_arr);
 442:	c5 01       	movw	r24, r10
 444:	0e 94 0a 01 	call	0x214	; 0x214 <PrintTime>
				if((PINB & 0xff) == 0x10)  //자리수변경
 448:	86 b3       	in	r24, 0x16	; 22
 44a:	80 31       	cpi	r24, 0x10	; 16
 44c:	09 f4       	brne	.+2      	; 0x450 <main+0x1a8>
 44e:	52 c0       	rjmp	.+164    	; 0x4f4 <main+0x24c>
				{
					setDigitCount++;
					setDigitCount %= 4;
				}
				else if((PINB & 0xff) == 0x20) // 
 450:	86 b3       	in	r24, 0x16	; 22
 452:	80 32       	cpi	r24, 0x20	; 32
 454:	09 f0       	breq	.+2      	; 0x458 <main+0x1b0>
 456:	98 cf       	rjmp	.-208    	; 0x388 <main+0xe0>
				{					
					cur_time_arr[setDigitCount]++;
 458:	f8 01       	movw	r30, r16
 45a:	ee 0f       	add	r30, r30
 45c:	ff 1f       	adc	r31, r31
 45e:	ec 0d       	add	r30, r12
 460:	fd 1d       	adc	r31, r13
 462:	84 81       	ldd	r24, Z+4	; 0x04
 464:	95 81       	ldd	r25, Z+5	; 0x05
 466:	01 96       	adiw	r24, 0x01	; 1
 468:	95 83       	std	Z+5, r25	; 0x05
 46a:	84 83       	std	Z+4, r24	; 0x04
					if(setDigitCount == 0 || setDigitCount == 2)
 46c:	01 15       	cp	r16, r1
 46e:	11 05       	cpc	r17, r1
 470:	19 f0       	breq	.+6      	; 0x478 <main+0x1d0>
 472:	02 30       	cpi	r16, 0x02	; 2
 474:	11 05       	cpc	r17, r1
 476:	41 f4       	brne	.+16     	; 0x488 <main+0x1e0>
						cur_time_arr[setDigitCount] %= 6;
 478:	f8 01       	movw	r30, r16
 47a:	ee 0f       	add	r30, r30
 47c:	ff 1f       	adc	r31, r31
 47e:	ec 0d       	add	r30, r12
 480:	fd 1d       	adc	r31, r13
 482:	66 e0       	ldi	r22, 0x06	; 6
 484:	70 e0       	ldi	r23, 0x00	; 0
 486:	02 c0       	rjmp	.+4      	; 0x48c <main+0x1e4>
					else 
						cur_time_arr[setDigitCount] %= 10;
 488:	6a e0       	ldi	r22, 0x0A	; 10
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	0e 94 83 03 	call	0x706	; 0x706 <__divmodhi4>
 490:	95 83       	std	Z+5, r25	; 0x05
 492:	84 83       	std	Z+4, r24	; 0x04
 494:	79 cf       	rjmp	.-270    	; 0x388 <main+0xe0>
				}
				break;
			case 2: // 스탑워치
				RunningTime(cur_time_arr,&temp_time);
 496:	c5 01       	movw	r24, r10
 498:	b6 01       	movw	r22, r12
 49a:	0e 94 98 00 	call	0x130	; 0x130 <RunningTime>
				PrintTime(stop_time_arr);
 49e:	c1 01       	movw	r24, r2
 4a0:	0e 94 0a 01 	call	0x214	; 0x214 <PrintTime>
				
				if(stopwatch_stop == 0) 
 4a4:	81 14       	cp	r8, r1
 4a6:	91 04       	cpc	r9, r1
 4a8:	21 f4       	brne	.+8      	; 0x4b2 <main+0x20a>
					RunningTime(stop_time_arr,&temp_time);
 4aa:	c1 01       	movw	r24, r2
 4ac:	b6 01       	movw	r22, r12
 4ae:	0e 94 98 00 	call	0x130	; 0x130 <RunningTime>
				
				if((PINB & 0xff) == 0x10 && stopwatch_stop == 0)	// 시간 가고있으면 멈춤				
 4b2:	86 b3       	in	r24, 0x16	; 22
 4b4:	80 31       	cpi	r24, 0x10	; 16
 4b6:	39 f4       	brne	.+14     	; 0x4c6 <main+0x21e>
 4b8:	81 14       	cp	r8, r1
 4ba:	91 04       	cpc	r9, r1
 4bc:	21 f4       	brne	.+8      	; 0x4c6 <main+0x21e>
 4be:	41 e0       	ldi	r20, 0x01	; 1
 4c0:	84 2e       	mov	r8, r20
 4c2:	91 2c       	mov	r9, r1
 4c4:	61 cf       	rjmp	.-318    	; 0x388 <main+0xe0>
					stopwatch_stop = 1;
				else if((PINB & 0xff) == 0x10 && stopwatch_stop == 1) // 안가고있으면 다시 흐름
 4c6:	86 b3       	in	r24, 0x16	; 22
 4c8:	80 31       	cpi	r24, 0x10	; 16
 4ca:	09 f0       	breq	.+2      	; 0x4ce <main+0x226>
 4cc:	5d cf       	rjmp	.-326    	; 0x388 <main+0xe0>
 4ce:	b1 e0       	ldi	r27, 0x01	; 1
 4d0:	8b 16       	cp	r8, r27
 4d2:	91 04       	cpc	r9, r1
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <main+0x230>
 4d6:	58 cf       	rjmp	.-336    	; 0x388 <main+0xe0>
 4d8:	88 24       	eor	r8, r8
 4da:	99 24       	eor	r9, r9
 4dc:	55 cf       	rjmp	.-342    	; 0x388 <main+0xe0>
					stopwatch_stop = 0;
					
				break;
			case 3: // 알람
				// 키입력으로 시간
				RunningTime(cur_time_arr,&temp_time);
 4de:	c5 01       	movw	r24, r10
 4e0:	b6 01       	movw	r22, r12
 4e2:	0e 94 98 00 	call	0x130	; 0x130 <RunningTime>
				PrintTime(alram_time_arr);
 4e6:	ce 01       	movw	r24, r28
 4e8:	45 96       	adiw	r24, 0x15	; 21
 4ea:	0e 94 0a 01 	call	0x214	; 0x214 <PrintTime>
				if((PINB & 0xff) == 0x10)  //자리수변경
 4ee:	86 b3       	in	r24, 0x16	; 22
 4f0:	80 31       	cpi	r24, 0x10	; 16
 4f2:	41 f4       	brne	.+16     	; 0x504 <main+0x25c>
				{
					setDigitCount++;
					setDigitCount %= 4;
 4f4:	c8 01       	movw	r24, r16
 4f6:	01 96       	adiw	r24, 0x01	; 1
 4f8:	64 e0       	ldi	r22, 0x04	; 4
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	0e 94 83 03 	call	0x706	; 0x706 <__divmodhi4>
 500:	8c 01       	movw	r16, r24
 502:	42 cf       	rjmp	.-380    	; 0x388 <main+0xe0>
				}
				else if((PINB & 0xff) == 0x20) // 숫자 변경
 504:	86 b3       	in	r24, 0x16	; 22
 506:	80 32       	cpi	r24, 0x20	; 32
 508:	09 f0       	breq	.+2      	; 0x50c <main+0x264>
 50a:	3e cf       	rjmp	.-388    	; 0x388 <main+0xe0>
				{
					alram_time_arr[setDigitCount]++;
 50c:	f8 01       	movw	r30, r16
 50e:	ee 0f       	add	r30, r30
 510:	ff 1f       	adc	r31, r31
 512:	ec 0d       	add	r30, r12
 514:	fd 1d       	adc	r31, r13
 516:	84 89       	ldd	r24, Z+20	; 0x14
 518:	95 89       	ldd	r25, Z+21	; 0x15
 51a:	01 96       	adiw	r24, 0x01	; 1
 51c:	95 8b       	std	Z+21, r25	; 0x15
 51e:	84 8b       	std	Z+20, r24	; 0x14
					if(setDigitCount == 0 || setDigitCount == 2)
 520:	01 15       	cp	r16, r1
 522:	11 05       	cpc	r17, r1
 524:	19 f0       	breq	.+6      	; 0x52c <main+0x284>
 526:	02 30       	cpi	r16, 0x02	; 2
 528:	11 05       	cpc	r17, r1
 52a:	41 f4       	brne	.+16     	; 0x53c <main+0x294>
					alram_time_arr[setDigitCount] %= 6;
 52c:	f8 01       	movw	r30, r16
 52e:	ee 0f       	add	r30, r30
 530:	ff 1f       	adc	r31, r31
 532:	ec 0d       	add	r30, r12
 534:	fd 1d       	adc	r31, r13
 536:	66 e0       	ldi	r22, 0x06	; 6
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	02 c0       	rjmp	.+4      	; 0x540 <main+0x298>
					else
					alram_time_arr[setDigitCount] %= 10;
 53c:	6a e0       	ldi	r22, 0x0A	; 10
 53e:	70 e0       	ldi	r23, 0x00	; 0
 540:	0e 94 83 03 	call	0x706	; 0x706 <__divmodhi4>
 544:	95 8b       	std	Z+21, r25	; 0x15
 546:	84 8b       	std	Z+20, r24	; 0x14
 548:	1f cf       	rjmp	.-450    	; 0x388 <main+0xe0>

0000054a <__subsf3>:
 54a:	50 58       	subi	r21, 0x80	; 128

0000054c <__addsf3>:
 54c:	bb 27       	eor	r27, r27
 54e:	aa 27       	eor	r26, r26
 550:	0e d0       	rcall	.+28     	; 0x56e <__addsf3x>
 552:	77 c0       	rjmp	.+238    	; 0x642 <__fp_round>
 554:	68 d0       	rcall	.+208    	; 0x626 <__fp_pscA>
 556:	30 f0       	brcs	.+12     	; 0x564 <__addsf3+0x18>
 558:	6d d0       	rcall	.+218    	; 0x634 <__fp_pscB>
 55a:	20 f0       	brcs	.+8      	; 0x564 <__addsf3+0x18>
 55c:	31 f4       	brne	.+12     	; 0x56a <__addsf3+0x1e>
 55e:	9f 3f       	cpi	r25, 0xFF	; 255
 560:	11 f4       	brne	.+4      	; 0x566 <__addsf3+0x1a>
 562:	1e f4       	brtc	.+6      	; 0x56a <__addsf3+0x1e>
 564:	5d c0       	rjmp	.+186    	; 0x620 <__fp_nan>
 566:	0e f4       	brtc	.+2      	; 0x56a <__addsf3+0x1e>
 568:	e0 95       	com	r30
 56a:	e7 fb       	bst	r30, 7
 56c:	53 c0       	rjmp	.+166    	; 0x614 <__fp_inf>

0000056e <__addsf3x>:
 56e:	e9 2f       	mov	r30, r25
 570:	79 d0       	rcall	.+242    	; 0x664 <__fp_split3>
 572:	80 f3       	brcs	.-32     	; 0x554 <__addsf3+0x8>
 574:	ba 17       	cp	r27, r26
 576:	62 07       	cpc	r22, r18
 578:	73 07       	cpc	r23, r19
 57a:	84 07       	cpc	r24, r20
 57c:	95 07       	cpc	r25, r21
 57e:	18 f0       	brcs	.+6      	; 0x586 <__addsf3x+0x18>
 580:	71 f4       	brne	.+28     	; 0x59e <__addsf3x+0x30>
 582:	9e f5       	brtc	.+102    	; 0x5ea <__addsf3x+0x7c>
 584:	91 c0       	rjmp	.+290    	; 0x6a8 <__fp_zero>
 586:	0e f4       	brtc	.+2      	; 0x58a <__addsf3x+0x1c>
 588:	e0 95       	com	r30
 58a:	0b 2e       	mov	r0, r27
 58c:	ba 2f       	mov	r27, r26
 58e:	a0 2d       	mov	r26, r0
 590:	0b 01       	movw	r0, r22
 592:	b9 01       	movw	r22, r18
 594:	90 01       	movw	r18, r0
 596:	0c 01       	movw	r0, r24
 598:	ca 01       	movw	r24, r20
 59a:	a0 01       	movw	r20, r0
 59c:	11 24       	eor	r1, r1
 59e:	ff 27       	eor	r31, r31
 5a0:	59 1b       	sub	r21, r25
 5a2:	99 f0       	breq	.+38     	; 0x5ca <__addsf3x+0x5c>
 5a4:	59 3f       	cpi	r21, 0xF9	; 249
 5a6:	50 f4       	brcc	.+20     	; 0x5bc <__addsf3x+0x4e>
 5a8:	50 3e       	cpi	r21, 0xE0	; 224
 5aa:	68 f1       	brcs	.+90     	; 0x606 <__addsf3x+0x98>
 5ac:	1a 16       	cp	r1, r26
 5ae:	f0 40       	sbci	r31, 0x00	; 0
 5b0:	a2 2f       	mov	r26, r18
 5b2:	23 2f       	mov	r18, r19
 5b4:	34 2f       	mov	r19, r20
 5b6:	44 27       	eor	r20, r20
 5b8:	58 5f       	subi	r21, 0xF8	; 248
 5ba:	f3 cf       	rjmp	.-26     	; 0x5a2 <__addsf3x+0x34>
 5bc:	46 95       	lsr	r20
 5be:	37 95       	ror	r19
 5c0:	27 95       	ror	r18
 5c2:	a7 95       	ror	r26
 5c4:	f0 40       	sbci	r31, 0x00	; 0
 5c6:	53 95       	inc	r21
 5c8:	c9 f7       	brne	.-14     	; 0x5bc <__addsf3x+0x4e>
 5ca:	7e f4       	brtc	.+30     	; 0x5ea <__addsf3x+0x7c>
 5cc:	1f 16       	cp	r1, r31
 5ce:	ba 0b       	sbc	r27, r26
 5d0:	62 0b       	sbc	r22, r18
 5d2:	73 0b       	sbc	r23, r19
 5d4:	84 0b       	sbc	r24, r20
 5d6:	ba f0       	brmi	.+46     	; 0x606 <__addsf3x+0x98>
 5d8:	91 50       	subi	r25, 0x01	; 1
 5da:	a1 f0       	breq	.+40     	; 0x604 <__addsf3x+0x96>
 5dc:	ff 0f       	add	r31, r31
 5de:	bb 1f       	adc	r27, r27
 5e0:	66 1f       	adc	r22, r22
 5e2:	77 1f       	adc	r23, r23
 5e4:	88 1f       	adc	r24, r24
 5e6:	c2 f7       	brpl	.-16     	; 0x5d8 <__addsf3x+0x6a>
 5e8:	0e c0       	rjmp	.+28     	; 0x606 <__addsf3x+0x98>
 5ea:	ba 0f       	add	r27, r26
 5ec:	62 1f       	adc	r22, r18
 5ee:	73 1f       	adc	r23, r19
 5f0:	84 1f       	adc	r24, r20
 5f2:	48 f4       	brcc	.+18     	; 0x606 <__addsf3x+0x98>
 5f4:	87 95       	ror	r24
 5f6:	77 95       	ror	r23
 5f8:	67 95       	ror	r22
 5fa:	b7 95       	ror	r27
 5fc:	f7 95       	ror	r31
 5fe:	9e 3f       	cpi	r25, 0xFE	; 254
 600:	08 f0       	brcs	.+2      	; 0x604 <__addsf3x+0x96>
 602:	b3 cf       	rjmp	.-154    	; 0x56a <__addsf3+0x1e>
 604:	93 95       	inc	r25
 606:	88 0f       	add	r24, r24
 608:	08 f0       	brcs	.+2      	; 0x60c <__addsf3x+0x9e>
 60a:	99 27       	eor	r25, r25
 60c:	ee 0f       	add	r30, r30
 60e:	97 95       	ror	r25
 610:	87 95       	ror	r24
 612:	08 95       	ret

00000614 <__fp_inf>:
 614:	97 f9       	bld	r25, 7
 616:	9f 67       	ori	r25, 0x7F	; 127
 618:	80 e8       	ldi	r24, 0x80	; 128
 61a:	70 e0       	ldi	r23, 0x00	; 0
 61c:	60 e0       	ldi	r22, 0x00	; 0
 61e:	08 95       	ret

00000620 <__fp_nan>:
 620:	9f ef       	ldi	r25, 0xFF	; 255
 622:	80 ec       	ldi	r24, 0xC0	; 192
 624:	08 95       	ret

00000626 <__fp_pscA>:
 626:	00 24       	eor	r0, r0
 628:	0a 94       	dec	r0
 62a:	16 16       	cp	r1, r22
 62c:	17 06       	cpc	r1, r23
 62e:	18 06       	cpc	r1, r24
 630:	09 06       	cpc	r0, r25
 632:	08 95       	ret

00000634 <__fp_pscB>:
 634:	00 24       	eor	r0, r0
 636:	0a 94       	dec	r0
 638:	12 16       	cp	r1, r18
 63a:	13 06       	cpc	r1, r19
 63c:	14 06       	cpc	r1, r20
 63e:	05 06       	cpc	r0, r21
 640:	08 95       	ret

00000642 <__fp_round>:
 642:	09 2e       	mov	r0, r25
 644:	03 94       	inc	r0
 646:	00 0c       	add	r0, r0
 648:	11 f4       	brne	.+4      	; 0x64e <__fp_round+0xc>
 64a:	88 23       	and	r24, r24
 64c:	52 f0       	brmi	.+20     	; 0x662 <__fp_round+0x20>
 64e:	bb 0f       	add	r27, r27
 650:	40 f4       	brcc	.+16     	; 0x662 <__fp_round+0x20>
 652:	bf 2b       	or	r27, r31
 654:	11 f4       	brne	.+4      	; 0x65a <__fp_round+0x18>
 656:	60 ff       	sbrs	r22, 0
 658:	04 c0       	rjmp	.+8      	; 0x662 <__fp_round+0x20>
 65a:	6f 5f       	subi	r22, 0xFF	; 255
 65c:	7f 4f       	sbci	r23, 0xFF	; 255
 65e:	8f 4f       	sbci	r24, 0xFF	; 255
 660:	9f 4f       	sbci	r25, 0xFF	; 255
 662:	08 95       	ret

00000664 <__fp_split3>:
 664:	57 fd       	sbrc	r21, 7
 666:	90 58       	subi	r25, 0x80	; 128
 668:	44 0f       	add	r20, r20
 66a:	55 1f       	adc	r21, r21
 66c:	59 f0       	breq	.+22     	; 0x684 <__fp_splitA+0x10>
 66e:	5f 3f       	cpi	r21, 0xFF	; 255
 670:	71 f0       	breq	.+28     	; 0x68e <__fp_splitA+0x1a>
 672:	47 95       	ror	r20

00000674 <__fp_splitA>:
 674:	88 0f       	add	r24, r24
 676:	97 fb       	bst	r25, 7
 678:	99 1f       	adc	r25, r25
 67a:	61 f0       	breq	.+24     	; 0x694 <__fp_splitA+0x20>
 67c:	9f 3f       	cpi	r25, 0xFF	; 255
 67e:	79 f0       	breq	.+30     	; 0x69e <__fp_splitA+0x2a>
 680:	87 95       	ror	r24
 682:	08 95       	ret
 684:	12 16       	cp	r1, r18
 686:	13 06       	cpc	r1, r19
 688:	14 06       	cpc	r1, r20
 68a:	55 1f       	adc	r21, r21
 68c:	f2 cf       	rjmp	.-28     	; 0x672 <__fp_split3+0xe>
 68e:	46 95       	lsr	r20
 690:	f1 df       	rcall	.-30     	; 0x674 <__fp_splitA>
 692:	08 c0       	rjmp	.+16     	; 0x6a4 <__fp_splitA+0x30>
 694:	16 16       	cp	r1, r22
 696:	17 06       	cpc	r1, r23
 698:	18 06       	cpc	r1, r24
 69a:	99 1f       	adc	r25, r25
 69c:	f1 cf       	rjmp	.-30     	; 0x680 <__fp_splitA+0xc>
 69e:	86 95       	lsr	r24
 6a0:	71 05       	cpc	r23, r1
 6a2:	61 05       	cpc	r22, r1
 6a4:	08 94       	sec
 6a6:	08 95       	ret

000006a8 <__fp_zero>:
 6a8:	e8 94       	clt

000006aa <__fp_szero>:
 6aa:	bb 27       	eor	r27, r27
 6ac:	66 27       	eor	r22, r22
 6ae:	77 27       	eor	r23, r23
 6b0:	cb 01       	movw	r24, r22
 6b2:	97 f9       	bld	r25, 7
 6b4:	08 95       	ret

000006b6 <__gesf2>:
 6b6:	03 d0       	rcall	.+6      	; 0x6be <__fp_cmp>
 6b8:	08 f4       	brcc	.+2      	; 0x6bc <__gesf2+0x6>
 6ba:	8f ef       	ldi	r24, 0xFF	; 255
 6bc:	08 95       	ret

000006be <__fp_cmp>:
 6be:	99 0f       	add	r25, r25
 6c0:	00 08       	sbc	r0, r0
 6c2:	55 0f       	add	r21, r21
 6c4:	aa 0b       	sbc	r26, r26
 6c6:	e0 e8       	ldi	r30, 0x80	; 128
 6c8:	fe ef       	ldi	r31, 0xFE	; 254
 6ca:	16 16       	cp	r1, r22
 6cc:	17 06       	cpc	r1, r23
 6ce:	e8 07       	cpc	r30, r24
 6d0:	f9 07       	cpc	r31, r25
 6d2:	c0 f0       	brcs	.+48     	; 0x704 <__fp_cmp+0x46>
 6d4:	12 16       	cp	r1, r18
 6d6:	13 06       	cpc	r1, r19
 6d8:	e4 07       	cpc	r30, r20
 6da:	f5 07       	cpc	r31, r21
 6dc:	98 f0       	brcs	.+38     	; 0x704 <__fp_cmp+0x46>
 6de:	62 1b       	sub	r22, r18
 6e0:	73 0b       	sbc	r23, r19
 6e2:	84 0b       	sbc	r24, r20
 6e4:	95 0b       	sbc	r25, r21
 6e6:	39 f4       	brne	.+14     	; 0x6f6 <__fp_cmp+0x38>
 6e8:	0a 26       	eor	r0, r26
 6ea:	61 f0       	breq	.+24     	; 0x704 <__fp_cmp+0x46>
 6ec:	23 2b       	or	r18, r19
 6ee:	24 2b       	or	r18, r20
 6f0:	25 2b       	or	r18, r21
 6f2:	21 f4       	brne	.+8      	; 0x6fc <__fp_cmp+0x3e>
 6f4:	08 95       	ret
 6f6:	0a 26       	eor	r0, r26
 6f8:	09 f4       	brne	.+2      	; 0x6fc <__fp_cmp+0x3e>
 6fa:	a1 40       	sbci	r26, 0x01	; 1
 6fc:	a6 95       	lsr	r26
 6fe:	8f ef       	ldi	r24, 0xFF	; 255
 700:	81 1d       	adc	r24, r1
 702:	81 1d       	adc	r24, r1
 704:	08 95       	ret

00000706 <__divmodhi4>:
 706:	97 fb       	bst	r25, 7
 708:	09 2e       	mov	r0, r25
 70a:	07 26       	eor	r0, r23
 70c:	0a d0       	rcall	.+20     	; 0x722 <__divmodhi4_neg1>
 70e:	77 fd       	sbrc	r23, 7
 710:	04 d0       	rcall	.+8      	; 0x71a <__divmodhi4_neg2>
 712:	0c d0       	rcall	.+24     	; 0x72c <__udivmodhi4>
 714:	06 d0       	rcall	.+12     	; 0x722 <__divmodhi4_neg1>
 716:	00 20       	and	r0, r0
 718:	1a f4       	brpl	.+6      	; 0x720 <__divmodhi4_exit>

0000071a <__divmodhi4_neg2>:
 71a:	70 95       	com	r23
 71c:	61 95       	neg	r22
 71e:	7f 4f       	sbci	r23, 0xFF	; 255

00000720 <__divmodhi4_exit>:
 720:	08 95       	ret

00000722 <__divmodhi4_neg1>:
 722:	f6 f7       	brtc	.-4      	; 0x720 <__divmodhi4_exit>
 724:	90 95       	com	r25
 726:	81 95       	neg	r24
 728:	9f 4f       	sbci	r25, 0xFF	; 255
 72a:	08 95       	ret

0000072c <__udivmodhi4>:
 72c:	aa 1b       	sub	r26, r26
 72e:	bb 1b       	sub	r27, r27
 730:	51 e1       	ldi	r21, 0x11	; 17
 732:	07 c0       	rjmp	.+14     	; 0x742 <__udivmodhi4_ep>

00000734 <__udivmodhi4_loop>:
 734:	aa 1f       	adc	r26, r26
 736:	bb 1f       	adc	r27, r27
 738:	a6 17       	cp	r26, r22
 73a:	b7 07       	cpc	r27, r23
 73c:	10 f0       	brcs	.+4      	; 0x742 <__udivmodhi4_ep>
 73e:	a6 1b       	sub	r26, r22
 740:	b7 0b       	sbc	r27, r23

00000742 <__udivmodhi4_ep>:
 742:	88 1f       	adc	r24, r24
 744:	99 1f       	adc	r25, r25
 746:	5a 95       	dec	r21
 748:	a9 f7       	brne	.-22     	; 0x734 <__udivmodhi4_loop>
 74a:	80 95       	com	r24
 74c:	90 95       	com	r25
 74e:	bc 01       	movw	r22, r24
 750:	cd 01       	movw	r24, r26
 752:	08 95       	ret

00000754 <_exit>:
 754:	f8 94       	cli

00000756 <__stop_program>:
 756:	ff cf       	rjmp	.-2      	; 0x756 <__stop_program>
