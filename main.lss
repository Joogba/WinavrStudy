
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000029  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000162  00000000  00000000  0000020b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d6  00000000  00000000  0000036d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000223  00000000  00000000  00000443  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000668  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d3  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000048  00000000  00000000  0000076b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e6       	ldi	r30, 0x6E	; 110
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  b6:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <port_init>:
#define EX_LED  (*(volatile unsigned char *)0x8008)


void port_init(void)
{
 PORTA = 0x00;
  be:	1b ba       	out	0x1b, r1	; 27
 DDRA  = 0xff;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	8a bb       	out	0x1a, r24	; 26
 
 PORTB = 0x00;
  c4:	18 ba       	out	0x18, r1	; 24
 DDRB  = 0x00;
  c6:	17 ba       	out	0x17, r1	; 23
 
 PORTC = 0x00; //m103 output only
  c8:	15 ba       	out	0x15, r1	; 21
 DDRC  = 0x03;
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	84 bb       	out	0x14, r24	; 20
 
 PORTD = 0x00;
  ce:	12 ba       	out	0x12, r1	; 18
 DDRD  = 0x00;
  d0:	11 ba       	out	0x11, r1	; 17
 
 PORTE = 0x00;
  d2:	13 b8       	out	0x03, r1	; 3
 DDRE  = 0x00;
  d4:	12 b8       	out	0x02, r1	; 2
 
 PORTF = 0x00;
  d6:	10 92 62 00 	sts	0x0062, r1
 DDRF  = 0x00;
  da:	10 92 61 00 	sts	0x0061, r1
 
 PORTG = 0x00;
  de:	10 92 65 00 	sts	0x0065, r1
 DDRG  = 0x03;
  e2:	80 93 64 00 	sts	0x0064, r24
}
  e6:	08 95       	ret

000000e8 <main>:
	led_data = 0x01;
	key_old = 0x00;
	direction = 0;	
	

    port_init();
  e8:	0e 94 5f 00 	call	0xbe	; 0xbe <port_init>

	PORTB = 0x00;
  ec:	18 ba       	out	0x18, r1	; 24
	DDRB = 0x00;
  ee:	17 ba       	out	0x17, r1	; 23
	MCUCR = 0x80;
  f0:	80 e8       	ldi	r24, 0x80	; 128
  f2:	85 bf       	out	0x35, r24	; 53
    PORTD = 0xff; // PORTD ÃÊ±â°ª ¼³Á¤	
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	82 bb       	out	0x12, r24	; 18
	DDRD = 0xff; // PORTD  ¸ðµÎ Ãâ·ÂÀ¸·Î ¼³Á¤	   
  f8:	81 bb       	out	0x11, r24	; 17
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 100:	6e e1       	ldi	r22, 0x1E	; 30
 102:	70 e0       	ldi	r23, 0x00	; 0
	
	while (1) 
   {
		keydata = PINB & 0xff;
 104:	56 b3       	in	r21, 0x16	; 22
		if (keydata != key_old)
 106:	54 17       	cp	r21, r20
 108:	61 f0       	breq	.+24     	; 0x122 <main+0x3a>
		{ 
			if (keydata == 0x02) direction = 0;  // ÁÂ -> ¿ì
 10a:	52 30       	cpi	r21, 0x02	; 2
 10c:	11 f4       	brne	.+4      	; 0x112 <main+0x2a>
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	11 c0       	rjmp	.+34     	; 0x134 <main+0x4c>
			else if (keydata == 0x04) direction = 1; // ¿ì -> ÁÂ
 112:	54 30       	cpi	r21, 0x04	; 4
 114:	99 f0       	breq	.+38     	; 0x13c <main+0x54>
			else if (keydata == 0x80) direction = 2; // ±ôºý
 116:	50 38       	cpi	r21, 0x80	; 128
 118:	b1 f0       	breq	.+44     	; 0x146 <main+0x5e>
			else if (key_old == 0x80 && keydata == 0x00) direction = 3;// ²¨Áü
 11a:	40 38       	cpi	r20, 0x80	; 128
 11c:	11 f4       	brne	.+4      	; 0x122 <main+0x3a>
 11e:	55 23       	and	r21, r21
 120:	b9 f0       	breq	.+46     	; 0x150 <main+0x68>
		}
		
		switch(direction)
 122:	31 30       	cpi	r19, 0x01	; 1
 124:	61 f0       	breq	.+24     	; 0x13e <main+0x56>
 126:	31 30       	cpi	r19, 0x01	; 1
 128:	28 f0       	brcs	.+10     	; 0x134 <main+0x4c>
 12a:	32 30       	cpi	r19, 0x02	; 2
 12c:	69 f0       	breq	.+26     	; 0x148 <main+0x60>
 12e:	33 30       	cpi	r19, 0x03	; 3
 130:	89 f4       	brne	.+34     	; 0x154 <main+0x6c>
 132:	0f c0       	rjmp	.+30     	; 0x152 <main+0x6a>
		{
			case 0:
				led_data = led_data >>1;
 134:	26 95       	lsr	r18
				if (led_data == 0x00) 
 136:	71 f4       	brne	.+28     	; 0x154 <main+0x6c>
 138:	20 e8       	ldi	r18, 0x80	; 128
 13a:	0c c0       	rjmp	.+24     	; 0x154 <main+0x6c>
 13c:	31 e0       	ldi	r19, 0x01	; 1
					led_data = 0x80; 
				break;
				
			case 1:
				led_data = led_data << 1;
 13e:	22 0f       	add	r18, r18
				if (led_data == 0x00) 
 140:	49 f4       	brne	.+18     	; 0x154 <main+0x6c>
 142:	21 e0       	ldi	r18, 0x01	; 1
 144:	07 c0       	rjmp	.+14     	; 0x154 <main+0x6c>
 146:	32 e0       	ldi	r19, 0x02	; 2
					led_data = 0x01; 
				break;
				
			case 2:
				if( led_data == 0x00)
 148:	22 23       	and	r18, r18
 14a:	19 f4       	brne	.+6      	; 0x152 <main+0x6a>
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	02 c0       	rjmp	.+4      	; 0x154 <main+0x6c>
 150:	33 e0       	ldi	r19, 0x03	; 3
 152:	20 e0       	ldi	r18, 0x00	; 0
			default:
				break;
		
		}
		
		EX_LED = led_data;
 154:	20 93 08 80 	sts	0x8008, r18
 158:	88 e8       	ldi	r24, 0x88	; 136
 15a:	93 e1       	ldi	r25, 0x13	; 19
 15c:	fb 01       	movw	r30, r22
 15e:	31 97       	sbiw	r30, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <main+0x76>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	45 2f       	mov	r20, r21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 166:	d1 f7       	brne	.-12     	; 0x15c <main+0x74>
 168:	cd cf       	rjmp	.-102    	; 0x104 <main+0x1c>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
