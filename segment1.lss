
segment1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000001d0  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000004a  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000221  00000000  00000000  000002ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000134  00000000  00000000  000004eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000027d  00000000  00000000  0000061f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  0000089c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000d4  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000009f  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000a3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ed       	ldi	r30, 0xD0	; 208
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 31       	cpi	r26, 0x1C	; 28
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  b6:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <port_init>:
#define EX_SS_SEL (*(volatile unsigned char *)0x8003)


void port_init(void)
{
 PORTA = 0x00;
  be:	1b ba       	out	0x1b, r1	; 27
 DDRA  = 0xff;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	8a bb       	out	0x1a, r24	; 26
 
 PORTB = 0x00;
  c4:	18 ba       	out	0x18, r1	; 24
 DDRB  = 0x00;
  c6:	17 ba       	out	0x17, r1	; 23
 
 PORTC = 0x00; //m103 output only
  c8:	15 ba       	out	0x15, r1	; 21
 DDRC  = 0x03;
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	84 bb       	out	0x14, r24	; 20
 
 PORTD = 0x00;
  ce:	12 ba       	out	0x12, r1	; 18
 DDRD  = 0x00;
  d0:	11 ba       	out	0x11, r1	; 17
 
 PORTE = 0x00;
  d2:	13 b8       	out	0x03, r1	; 3
 DDRE  = 0x00;
  d4:	12 b8       	out	0x02, r1	; 2
 
 PORTF = 0x00;
  d6:	10 92 62 00 	sts	0x0062, r1
 DDRF  = 0x00;
  da:	10 92 61 00 	sts	0x0061, r1
 
 PORTG = 0x00;
  de:	10 92 65 00 	sts	0x0065, r1
 DDRG  = 0x03;
  e2:	80 93 64 00 	sts	0x0064, r24
}
  e6:	08 95       	ret

000000e8 <main>:
								0x6d, 0x7d, 0x27, 0x7f, 0x6f, 0}; //0,1,2,3,4,5,6,7,8,9, blank
unsigned char display_num[17] = {10,10,10,2,0,1,7,1,5,4,0,0,9,10,10,10,10};


int main(void)
{
  e8:	df 92       	push	r13
  ea:	ef 92       	push	r14
  ec:	ff 92       	push	r15
  ee:	0f 93       	push	r16
  f0:	1f 93       	push	r17
    port_init();
  f2:	0e 94 5f 00 	call	0xbe	; 0xbe <port_init>

	EX_SS_SEL = 0x0f; // 초기값으로 디지트 OFF
  f6:	8f e0       	ldi	r24, 0x0F	; 15
  f8:	80 93 03 80 	sts	0x8003, r24
	MCUCR = 0x80;
  fc:	80 e8       	ldi	r24, 0x80	; 128
  fe:	85 bf       	out	0x35, r24	; 53
    PORTD = 0xff; // PORTD 초기값 설정	
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	82 bb       	out	0x12, r24	; 18
	DDRD = 0xff; // PORTD  모두 출력으로 설정	   
 104:	81 bb       	out	0x11, r24	; 17
 106:	80 e0       	ldi	r24, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 108:	4c ed       	ldi	r20, 0xDC	; 220
 10a:	55 e0       	ldi	r21, 0x05	; 5
	scroll = 0;
	idx = 0;
	
	while (1) 
	{
		EX_SS_SEL = 0xfe;
 10c:	3e ef       	ldi	r19, 0xFE	; 254
 10e:	d3 2e       	mov	r13, r19
		EX_SS_DATA = segment_data[display_num[idx%17]];
		_delay_ms(5);
		EX_SS_SEL = 0xfd;
 110:	2d ef       	ldi	r18, 0xFD	; 253
 112:	e2 2e       	mov	r14, r18
		EX_SS_DATA = segment_data[display_num[idx+1 %17]];
		_delay_ms(5);
		EX_SS_SEL = 0xfb;
 114:	9b ef       	ldi	r25, 0xFB	; 251
 116:	f9 2e       	mov	r15, r25
		EX_SS_DATA = segment_data[display_num[idx+2 %17]];
		_delay_ms(5);
		EX_SS_SEL = 0xf7;
 118:	07 ef       	ldi	r16, 0xF7	; 247
    port_init();

	EX_SS_SEL = 0x0f; // 초기값으로 디지트 OFF
	MCUCR = 0x80;
    PORTD = 0xff; // PORTD 초기값 설정	
	DDRD = 0xff; // PORTD  모두 출력으로 설정	   
 11a:	38 2f       	mov	r19, r24
	idx = 0;
	
	while (1) 
	{
		EX_SS_SEL = 0xfe;
		EX_SS_DATA = segment_data[display_num[idx%17]];
 11c:	83 2f       	mov	r24, r19
 11e:	61 e1       	ldi	r22, 0x11	; 17
 120:	0e 94 da 00 	call	0x1b4	; 0x1b4 <__udivmodqi4>
 124:	e9 2f       	mov	r30, r25
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	e5 5f       	subi	r30, 0xF5	; 245
 12a:	fe 4f       	sbci	r31, 0xFE	; 254
 12c:	e0 81       	ld	r30, Z
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	e0 50       	subi	r30, 0x00	; 0
 132:	ff 4f       	sbci	r31, 0xFF	; 255
 134:	10 81       	ld	r17, Z
		_delay_ms(5);
		EX_SS_SEL = 0xfd;
		EX_SS_DATA = segment_data[display_num[idx+1 %17]];
 136:	a3 2f       	mov	r26, r19
 138:	b0 e0       	ldi	r27, 0x00	; 0
 13a:	a5 5f       	subi	r26, 0xF5	; 245
 13c:	be 4f       	sbci	r27, 0xFE	; 254
 13e:	11 96       	adiw	r26, 0x01	; 1
 140:	ec 91       	ld	r30, X
 142:	11 97       	sbiw	r26, 0x01	; 1
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	e0 50       	subi	r30, 0x00	; 0
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	70 81       	ld	r23, Z
		_delay_ms(5);
		EX_SS_SEL = 0xfb;
		EX_SS_DATA = segment_data[display_num[idx+2 %17]];
 14c:	12 96       	adiw	r26, 0x02	; 2
 14e:	ec 91       	ld	r30, X
 150:	12 97       	sbiw	r26, 0x02	; 2
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	e0 50       	subi	r30, 0x00	; 0
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	60 81       	ld	r22, Z
		_delay_ms(5);
		EX_SS_SEL = 0xf7;
		EX_SS_DATA = segment_data[display_num[idx+3 %17]];
 15a:	13 96       	adiw	r26, 0x03	; 3
 15c:	ec 91       	ld	r30, X
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	e0 50       	subi	r30, 0x00	; 0
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	e0 81       	ld	r30, Z
 166:	20 e0       	ldi	r18, 0x00	; 0
	scroll = 0;
	idx = 0;
	
	while (1) 
	{
		EX_SS_SEL = 0xfe;
 168:	d0 92 03 80 	sts	0x8003, r13
		EX_SS_DATA = segment_data[display_num[idx%17]];
 16c:	10 93 02 80 	sts	0x8002, r17
 170:	ca 01       	movw	r24, r20
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <main+0x8a>
		_delay_ms(5);
		EX_SS_SEL = 0xfd;
 176:	e0 92 03 80 	sts	0x8003, r14
		EX_SS_DATA = segment_data[display_num[idx+1 %17]];
 17a:	70 93 02 80 	sts	0x8002, r23
 17e:	ca 01       	movw	r24, r20
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <main+0x98>
		_delay_ms(5);
		EX_SS_SEL = 0xfb;
 184:	f0 92 03 80 	sts	0x8003, r15
		EX_SS_DATA = segment_data[display_num[idx+2 %17]];
 188:	60 93 02 80 	sts	0x8002, r22
 18c:	ca 01       	movw	r24, r20
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <main+0xa6>
		_delay_ms(5);
		EX_SS_SEL = 0xf7;
 192:	00 93 03 80 	sts	0x8003, r16
		EX_SS_DATA = segment_data[display_num[idx+3 %17]];
 196:	e0 93 02 80 	sts	0x8002, r30
 19a:	ca 01       	movw	r24, r20
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <main+0xb4>
		_delay_ms(5);
		
		scroll++;
 1a0:	2f 5f       	subi	r18, 0xFF	; 255
		if (scroll == 25) {
 1a2:	29 31       	cpi	r18, 0x19	; 25
 1a4:	09 f7       	brne	.-62     	; 0x168 <main+0x80>
			idx++;
 1a6:	83 2f       	mov	r24, r19
 1a8:	8f 5f       	subi	r24, 0xFF	; 255
 1aa:	30 e0       	ldi	r19, 0x00	; 0
			if (idx == 13)
 1ac:	8d 30       	cpi	r24, 0x0D	; 13
 1ae:	09 f0       	breq	.+2      	; 0x1b2 <main+0xca>
 1b0:	b4 cf       	rjmp	.-152    	; 0x11a <main+0x32>
 1b2:	b4 cf       	rjmp	.-152    	; 0x11c <main+0x34>

000001b4 <__udivmodqi4>:
 1b4:	99 1b       	sub	r25, r25
 1b6:	79 e0       	ldi	r23, 0x09	; 9
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <__udivmodqi4_ep>

000001ba <__udivmodqi4_loop>:
 1ba:	99 1f       	adc	r25, r25
 1bc:	96 17       	cp	r25, r22
 1be:	08 f0       	brcs	.+2      	; 0x1c2 <__udivmodqi4_ep>
 1c0:	96 1b       	sub	r25, r22

000001c2 <__udivmodqi4_ep>:
 1c2:	88 1f       	adc	r24, r24
 1c4:	7a 95       	dec	r23
 1c6:	c9 f7       	brne	.-14     	; 0x1ba <__udivmodqi4_loop>
 1c8:	80 95       	com	r24
 1ca:	08 95       	ret

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
